package controlador;

import modelo.*;
import archivo.ManejoDeArchivos;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;

public class FuncionesDelSistema {
    private ArrayList<Estudiante> estudiantes;
    private ArrayList<Profesor> profesores;
    private ArrayList<Curso> cursos;
    private ArrayList<Matricula> matriculas;

    // Carga datos desde los archivos, el constructor
    public FuncionesDelSistema(){
        try {
            profesores = ManejoDeArchivos.leerProfesores();
            estudiantes = ManejoDeArchivos.leerEstudiantes();
            cursos = ManejoDeArchivos.leerCursos(profesores);
            matriculas = ManejoDeArchivos.leerMatriculas(estudiantes, cursos);
        } catch (IOException e) {
            System.out.println("Error cargando archivos: " + e.getMessage());
            profesores = new ArrayList<>();
            estudiantes = new ArrayList<>();
            cursos = new ArrayList<>();
            matriculas = new ArrayList<>();
        }
    }

    public boolean registrarEstudiante(Estudiante nuevo) {
        for (Estudiante e : estudiantes) {
            if (e.getCarnet().equalsIgnoreCase(nuevo.getCarnet())) {
                System.out.println("Estudiante ya registrado.");
                return false;
            }
        }
        estudiantes.add(nuevo);
        guardarEstudiantes();
        return true;
    }

    private void guardarEstudiantes() {
        try {
            ManejoDeArchivos.guardarEstudiantes(estudiantes);
        } catch (IOException e) {
            System.out.println("Error guardando estudiantes: " + e.getMessage());
        }
    }

    public boolean registrarProfesor(Profesor nuevo) {
        for (Profesor p : profesores) {
            if (p.getIdProfesor().equalsIgnoreCase(nuevo.getIdProfesor())) {
                System.out.println("Profesor ya registrado.");
                return false;
            }
        }
        profesores.add(nuevo);
        guardarProfesores();
        return true;
    }

    private void guardarProfesores() {
        try {
            ManejoDeArchivos.guardarProfesores(profesores);
        } catch (IOException e) {
            System.out.println("Error guardando profesores: " + e.getMessage());
        }
    }

    public boolean registrarCurso(Curso nuevo) {
        for (Curso c : cursos) {
            if (c.getCodigo().equalsIgnoreCase(nuevo.getCodigo())) {
                System.out.println("Curso ya registrado.");
                return false;
            }
        }
        cursos.add(nuevo);
        guardarCursos();
        return true;
    }

    private void guardarCursos() {
        try {
            ManejoDeArchivos.guardarCursos(cursos);
        } catch (IOException e) {
            System.out.println("Error guardando cursos: " + e.getMessage());
        }
    }

    public boolean matricularEstudiante(String carnet, String codigoCurso) {
        Estudiante est = buscarEstudiante(carnet);
        Curso cur = buscarCurso(codigoCurso);

        if (est == null || cur == null) {
            System.out.println("Estudiante o curso no existe.");
            return false;
        }

        for (Matricula m : matriculas) {
            if (m.getEstudiante().getCarnet().equals(carnet) &&
                m.getCurso().getCodigo().equals(codigoCurso)) {
                System.out.println("Ya está matriculado.");
                return false;
            }
        }

        Matricula nueva = new Matricula(est, cur, LocalDate.now());
        matriculas.add(nueva);
        guardarMatriculas();
        return true;
    }
   
    public ArrayList<Curso> getCursos() {
        return cursos;
    }

    public void setCursos(ArrayList<Curso> cursos) {
        this.cursos = cursos;
    }

    public FuncionesDelSistema(ArrayList<Curso> cursos) {
        this.cursos = cursos;
    }

    private void guardarMatriculas() {
        try {
            ManejoDeArchivos.guardarMatriculas(matriculas);
        } catch (IOException e) {
            System.out.println("Error guardando matrículas: " + e.getMessage());
        }
    }

    public void mostrarCursos() {
        for (Curso c : cursos) {
            System.out.println(c.getCodigo() + " - " + c.getNombre());
        }
    }

    public void mostrarEstudiantesPorCurso(String codigo) {
    for (Curso curso : cursos) {
        if (curso.getCodigo().equalsIgnoreCase(codigo.trim())) {
            System.out.println("\nEstudiantes en el curso: " + curso.getNombre());
            if (curso.getListaEstudiantes().isEmpty()) {
                System.out.println("No hay estudiantes matriculados en este curso.");
            } else {
                for (Estudiante est : curso.getListaEstudiantes()) {
                    System.out.println("Carnet: " + est.getCarnet());
                    System.out.println("Nombre: " + est.getNombres() + " " + est.getApellidos());
                    System.out.println("Email: " + est.getEmail());
                    System.out.println("Telefono: " + est.getTelefono());
                    System.out.println("---");
                }
            }
            return;
        }
    }
    System.out.println("Curso no encontrado.");
}

    public void mostrarCursosPorEstudiante(String carnet) {
        System.out.println("Cursos del estudiante " + carnet + ":");
        for (Matricula m : matriculas) {
            if (m.getEstudiante().getCarnet().equals(carnet)) {
                System.out.println("- " + m.getCurso().getNombre());
            }
        }
    }

    private Estudiante buscarEstudiante(String carnet) {
        for (Estudiante e : estudiantes) {
            if (e.getCarnet().equalsIgnoreCase(carnet)) return e;
        }
        return null;
    }

    private Curso buscarCurso(String codigo) {
        for (Curso c : cursos) {
            if (c.getCodigo().equalsIgnoreCase(codigo)) return c;
        }
        return null;
    }
        
public Profesor buscarProfesorPublico(String id) {
    for (Profesor p : profesores) {
        if (p.getIdProfesor().equalsIgnoreCase(id)) {
            return p;
        }
    }
    return null;
}

   public boolean registrarCurso(String codigo, String nombre, String descripcion, String idProfesor, int capacidad) {
   
    for (Curso c : cursos) {
        if (c.getCodigo().equalsIgnoreCase(codigo)) {
            return false; // verificamos que no se dupliquen cursos
        }
    }

    Profesor profe = null;
    for (Profesor p : profesores) {
        if (p.getIdProfesor().equalsIgnoreCase(idProfesor)) {
            profe = p;
            break;
        }
    }

    if (profe == null) {
        return false; //no existe este profesor
    }

    Curso nuevoCurso = new Curso(codigo, nombre, descripcion, profe, capacidad);
    cursos.add(nuevoCurso);

    try {
        ManejoDeArchivos.guardarCursos(cursos);
    } catch (IOException e) {
        System.out.println("Error al guardar curso en archivo: " + e.getMessage());
        return false;
    }

    return true;
}
   
}
